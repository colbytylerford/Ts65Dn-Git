test2$pred <- as.data.frame(predict(forest,train,type="response",predict.all=TRUE))
train2 <- train
train2$pred <- as.data.frame(predict(forest,train,type="response",predict.all=TRUE))
View(train2)
apply(c=(train$pred.individual.1,train$pred.individual.2),1,sd)
apply(train2[,c("pred.individual.1","pred.individual.2","pred.individual.3")],1,sd)
apply(subset(train2,select=c("pred.individual.1","pred.individual.2","pred.individual.3"),1,sd)
)
apply(subset(train2,select=c("pred.individual.1","pred.individual.2","pred.individual.3"),1,sd))
apply(subset(train2,select=c("pred.individual.1","pred.individual.2","pred.individual.3")),1,sd)
indiv <- subset(train2,select=c("pred.individual.1","pred.individual.2","pred.individual.3"))
View(train2)
rm(pred)
pred <- as.data.frame(predict(forest25,train,type="response",predict.all=TRUE))
pred <- as.data.frame(predict(forest,train,type="response",predict.all=TRUE))
View(pred)
indiv <- pred
indiv$aggregate <- NULL
train2$pred.sd <- apply(indiv,1,sd)
View(indiv)
View(test2)
View(test2)
test <- read.csv("C:/Users/cford38/Desktop/NAGLU/test.csv")
View(test)
train <- read.csv("C:/Users/cford38/Desktop/NAGLU/train.csv")
View(train)
View(train)
View(test)
#Call the library
library(randomForest)
##Generate Prediction
forest25 <- randomForest(allele1_freq~.,data=train,ntree=25)
pred <- as.data.frame(predict(forest25,train,type="response",predict.all=TRUE))
#Add aggregate prediction score to test data
test$prediction <- pred$aggregate
#Calculate SD for randomForest trees and add to test data
indiv <- pred
indiv$aggregate <- NULL
test$pred.sd <- apply(indiv,1,sd)
##Generate Prediction
forest25 <- randomForest(allele1_freq~.,data=train,ntree=25)
pred <- as.data.frame(predict(forest25,test,type="response",predict.all=TRUE))
#Add aggregate prediction score to test data
test$prediction <- pred$aggregate
#Calculate SD for randomForest trees and add to test data
indiv <- pred
indiv$aggregate <- NULL
test$pred.sd <- apply(indiv,1,sd)
##Generate Prediction
forest25 <- randomForest(allele1_freq~.,data=train,ntree=25)
pred <- as.data.frame(predict(forest25,test))
#Add aggregate prediction score to test data
test$prediction <- pred$aggregate
#Calculate SD for randomForest trees and add to test data
indiv <- pred
indiv$aggregate <- NULL
test$pred.sd <- apply(indiv,1,sd)
rm(pred)
rm(forest25)
rm(indiv)
forest25 <- randomForest(allele1_freq~.,data=train,ntree=25)
pred <- as.data.frame(predict(forest25,test,type="response",predict.all=TRUE))
levels(train$Wt_AA_Name)=levels(test$Wt_AA_Name)
levels(train$Wt_AA_Name)=levels(test$Wt_AA_Name)
levels(train$Mut_AA_Name)=levels(test$Mut_AA_Name)
levels(train$Domain)=levels(test$Domain)
pred <- as.data.frame(predict(forest25,test,type="response",predict.all=TRUE))
train <- read.csv("C:/Users/cford38/Desktop/NAGLU/NAGLU_AllJoin.csv")
View(train)
library(randomForest)
forest25 <- randomForest(pph2_prob~.,data=train,ntree=25)
na.omit(train$pph2_class)
na.omit(train$pph2_prob)
View(train)
rm(train)
train <- read.csv("C:/Users/cford38/Desktop/NAGLU/NAGLU_AllJoin.csv")
View(train)
forest25 <- randomForest(pph2_prob~.,data=train,ntree=25)
min(train$pph2_prob
)
na.omit(train$pph2_prob)
UT.sound.freqs_TRANSPOSE <- read.csv("C:/Users/cford38/Desktop/UT-sound-freqs_TRANSPOSE.csv")
View(UT.sound.freqs_TRANSPOSE)
data <- read.csv("C:/Users/cford38/Desktop/UT-sound-freqs_TRANSPOSE.csv")
View(data)
hclust(data, method = "complete")
d <- dist(as.matrix(data))
print(d)
hc <- hclust(d)
plot(hc)
row.names(data) <- data$Language
data$Language <- NULL
d <- dist(as.matrix(data))
hc <- hclust(d)
plot(hc)
source("http://bioconductor.org/biocLite.R")
biocLite("multtest")
library(multtest)
data("golub")
View(golub)
mean(golub)
dbinom(2,5,(1/6))
dbinom(3,5,(1/6))
pnorm(3,mean=10.8,sd=2.228901)
getwd()
mosFish <- read.table("unknownData.txt",header=TRUE)
View(mosFish)
mossample <- mosFish[1:40,]
sd(mossample)
margin <- qnorm(0.975)*(5.82/sqrt(40))
margin95 <- qnorm(0.975)*(5.82/sqrt(40))
rm(margin)
lower <- mean(mossample)-margin95
lower95 <- mean(mossample)-margin95
rm(lower)
upper95 <- mean(mossample)+margin95
lower
lower95
upper95
mean(mossample)-2*5.82
qnorm(0.975)
qnorm(0.95)
margin90 <- qnorm(0.95)*(5.82/sqrt(40))
lower90 <- mean(mossample)-margin90
upper90 <- mean(mossample)+margin90
lower90
upper90
margin50 <- qnorm(0.75)*(5.82/sqrt(40))
upper50 <- mean(mossample)+margin50
lower50 <- mean(mossample)-margin50
lower50
upper50
qqnorm(mossample)
qqline(mossample)
hist(mossample)
library(MASS)
fitdistr(mossample,"normal")
shapiro.test(mossample)
pbinom(4,mean=11.5,sd=2.491987,lower.tail=TRUE)
pbinom(3.5,25,.46)
pbinom(4,25,.46)-qbinom(4)
pbinom(4,25,.46)-dbinom(4)
pbinom(2.5,20,.54)
?dbinom
pbinom(4,25,.46)-dbinom(4,0)
pbinom(4,25,.46)-dbinom(4,25,.46)
pbinom(2.5,20,.54)-dbinom(2.5,20,.54)
pbinom(3,20,.54)-dbinom(3,20,.54)
(pbinom(30,45,.46)-dbinom(30,45,.46))-(pbinom(15,45,.46)-dbinom(15,45,.46))
pbinom(480,1000,.49)-dbinom(480,1000,.49)
(pbinom(520,1000,.51)-dbinom(520,1000,.51))-(pbinom(450,1000,.51)-dbinom(450,1000,.51))
(pbinom(520,1000,.49)-dbinom(520,1000,.49))-(pbinom(450,1000,.49)-dbinom(450,1000,.49))
pbinom(480,1000,.51)-dbinom(480,1000,.51)
MASTERTABLE.kaas.fpkm <- read.delim("C:/Users/cford38/Downloads/MASTERTABLE-kaas-fpkm.txt")
View(MASTERTABLE.kaas.fpkm)
data <- MASTERTABLE.kaas.fpkm
kmeans(data,3,iter.max = 10000)
kmeans(data[2:],3,iter.max = 10000)
kmeans(data[2:43],3,iter.max = 10000)
kmeans(data[2:43],3,iter.max = 10000)$cluster
kmeans(data[2:43],3,iter.max = 10000)
clusters <- kmeans(data[2:43],3,iter.max = 10000)
clusters <- kmeans(data[2:43],3,iter.max = 10000,algorithm = "Hartigan-Wong")
clusters
kmeans(data[2:43],3,iter.max = 10000,algorithm="Lloyd")
kmeans(data[2:43],3,iter.max = 10000,algorithm="Forgy")
kmeans(data[2:43],3,iter.max = 10000,algorithm="MacQueen")
kmeans(data[2:43],3,iter.max = 10000)
cluster <- kmeans(data[2:43],3,iter.max = 10000)
rm(clusters)
prcomp(data)
prcomp(data[2:43])
plot(prcomp(data[2:43]))
summary(prcomp(data[2:43]))
cluster$cluster
data$cluster <- cluster$cluster
View(data)
hist(data$cluster)
getwd()
write.table(data,file="EchinoCluster",sep=",")
cluster
qt(0.95,25,)
qt(0.95,23,)
qt(0.95,24,lower.tail = TRUE)
pt(1.785714,24,lower.tail = TRUE)
.3264/-0.4592
1-0.9625
((6.5-7.5)/(3.4/sqrt(60)))
?qnorm
qnorm(0.90,mean=6.5,sd=3.4)
qnorm(0.10,mean=6.5,sd=3.4)
qnorm(1-0.10)
qnorm(0.10)
pnorm(-2.278225)
qnorm(0.975)
6.5+(1.96*(3.4/sqrt(60)))
6.5-(1.96*(3.4/sqrt(60)))
(2700-3000)/(300/sqrt(27))
300/sqrt(27)
2700-3000
-3000/57.73
-300/57.73
pnorm(-5.196152,26)
qnorm(1-0.10/2)
-qnorm(1-0.10/2)
c(-qnorm(1-0.10/2),qnorm(1-0.10/2))
2*pnrom(-5.196152)
2*pnorm(-5.196152)
(1.28-4.43)/(sqrt((0.112/12)+(7.072/18)))
2*pnorm(-5.196152,lower.tail = F)
2*pnorm(-4.96681,lower.tail = FALSE)
2*pnorm(-4.96681)
2*pnorm(2.57,lower.tail = F)
2*pnorm(2.57)
2*pnorm(2.57)
2*pnorm(-4.96681)
sqrt(0.112)
sqrt(7.072)
?t.test
ara <- c(14.2,12.2,13.6,15.5,11.8,14.7,12.2,11.2,16.2)
t.test(ara,mu=1.28,alternative = "greater")
t.test(ara,mu=1.28,alternative = "less")
1+2+3+4+5+6+
7
.
.2
0.000000000000000000000000000000000000000003
0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
1/0
-1/0
1/0.00000000000000000000000000000000000000000000000000000000000001
1/-0.00000000000000000000000000000000000000000000000000000000000001
1/-0
MASTERTABLE.noRibosomes <- read.delim("C:/Users/cford38/Desktop/MASTERTABLE-noRibosomes.txt")
View(MASTERTABLE.noRibosomes)
data <- MASTERTABLE.noRibosomes
data$null1 <- NULL
data$null2 <- NULL
data$null3 <- NULL
kmeans(data, 3)
data[2,43]
data(2,43)
data[2:43]
?kmeans
kmeans(data[2:43],3,iter.max = 10000)
clusters <- kmeans(data[2:43],3,iter.max = 10000)
clusters$cluster
data$cluster <- clusters$cluster
View(data)
distict(data$cluster)
as.factor(data$cluster)
breast.cancer.wisconsin <- read.csv("C:/Users/cford38/Desktop/Project/Breast Cancer/breast-cancer-wisconsin.data", header=FALSE)
View(breast.cancer.wisconsin)
wdbc <- read.csv("C:/Users/cford38/Desktop/Project/Breast Cancer/wdbc.data", header=FALSE)
View(wdbc)
wpbc <- read.csv("C:/Users/cford38/Desktop/Project/Breast Cancer/wpbc.data", header=FALSE)
View(wpbc)
colnames(breast.cancer.wisconsin) <- c("Sample_code_number","Clump_Thickness","Uniformity_of_Cell_Size","Uniformity_of_Cell_Shape","Marginal_Adhesion","Single_Epithelial_Cell_Size","Bare_Nuclei","Bland_Chromatin","Normal_Nucleoli","Mitoses","Class")
View(breast.cancer.wisconsin)
colnames(wdbc) <- c("ID_number","Diagnosis","radius","texture","perimeter","area","smoothness","compactness","concavity","concave_points","symmetry","fractal_dimension")
colnames(wdbc) <- c("ID_number","Diagnosis","radius","texture","perimeter","area","smoothness","compactness","concavity","concave_points","symmetry","fractal_dimension","radius","texture","perimeter","area","smoothness","compactness","concavity","concave_points","symmetry","fractal_dimension")
colnames(wdbc) <- c("ID_number","Diagnosis","radius","texture","perimeter","area","smoothness","compactness","concavity","concave_points","symmetry","fractal_dimension","radius","texture","perimeter","area","smoothness","compactness","concavity","concave_points","symmetry","fractal_dimension","radius","texture","perimeter","area","smoothness","compactness","concavity","concave_points","symmetry","fractal_dimension")
View(wdbc)
Data_Cortex_Nuclear <- read.csv("C:/Users/cford38/Desktop/Project/Mouse Study/Data_Cortex_Nuclear.csv")
View(Data_Cortex_Nuclear)
qqplot(Data_Cortex_Nuclear$DYRK1A_N)
?qqplot
qqnorm(Data_Cortex_Nuclear$DYRK1A_N)
qqline(Data_Cortex_Nuclear$DYRK1A_N)
hist(Data_Cortex_Nuclear$DYRK1A_N)
class(Data_Cortex_Nuclear$Genotype)
install.packages('reshape')
library(reshape)
data <- Data_Cortex_Nuclear
mdata <- melt(data,id=c("MouseID",Genotype","Treatment","Behavior","class"))
mdata <- melt(data,id=c("class"))
View(mdata)
mdata <- melt(data,id=c("MouseID","class"))
mdata <- melt(data,id=c("MouseID","Genotype","Treatment","Behavior","class"))
pivot <- cast(mdata, class~variable,mean)
View(pivot)
classpivot <- cast(mdata, class~variable,mean)
View(mdata)
treatmentpivot <- cast(mdata, class~variable,mean)
treatmentpivot <- cast(mdata, Treatment~variable,mean)
genotypepivot <- cast(mdata, Genotype~variable,mean)
behaviorpivot <- cast(mdata, Behavior~variable,mean)
rm(pivot)
View(genotypepivot)
View(treatmentpivot)
View(classpivot)
View(behaviorpivot)
View(classpivot)
View(classpivot)
View(data)
View(classpivot)
View(data)
View(mdata)
install.packages("Biostrings")
ss <- read.table("C:/Users/cford38/Desktop/ss.txt", quote="\"", comment.char="")
View(ss)
ss(2)
ss$V1(2)
ss$V1[2]
ss$V1[3]
runApp("ShinyApp")
library(shiny)
runApp("ShinyApp")
runApp("my_app")
setwd("C:/Users/cford38/Desktop/Project/Mouse Study/ShinyApp")
runApp("my_app")
setwd("C:/Users/cford38/Desktop/Project/Mouse Study")
runApp("ShinyApp")
runApp("ShinyApp",display.mode = "showcase")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
RawData <- read.csv("C:/Users/cford38/Desktop/Project/Mouse Study/RawData.csv")
View(RawData)
RawData <- read.csv("C:/Users/cford38/Desktop/Project/Mouse Study/RawData.csv")
View(RawData)
runApp("ShinyApp")
runApp("ShinyApp")
RawData <- read.csv("C:/Users/cford38/Desktop/Project/Mouse Study/RawData.csv")
View(RawData)
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
#install.packages("shiny")
library(shiny)
runApp("ShinyApp")
install.packages("shinydashboard")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
library(shiny)
library(shinydashboard)
runApp("ShinyApp")
getwd()
setwd(..)
setwd(../)
setwd(/)
setwd("../")
getwd()
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
?kruskal.test
?kruskal.test
runApp("ShinyApp")
?wilcox.test
runApp("ShinyApp")
?t.test
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
install.packages("DT")
runApp("ShinyApp")
x <- c(1,2,"d",5)
RawData <- read.csv("C:/Users/cford38/Desktop/Project/Mouse Study/RawData.csv")
rm(x)
genes <- Filter(is.numeric, RawData)
View(genes)
runApp("ShinyApp")
View(RawData)
categories <- Filter(is.character, RawData[2,])
View(categories)
categories <- Filter(is.character, RawData)
categories <- Filter(is.factor, RawData)
View(categories)
cbind(categories,genes)
lmdata <- cbind(categories,genes)
View(lmdata)
subset(RawData,Mouse)
subset(RawData,class)
subset(RawData,colname=="class")
View(categories)
runApp("ShinyApp")
lmdata <- cbind(subset(RawData,select=(as.factor(input$geneselection))),RawData$Genotype,RawData$Treatment,RawData$Behavior)
lmdata <- cbind(subset(RawData,select=("BDNF_N."),RawData$Genotype,RawData$Treatment,RawData$Behavior)
lmdata <- cbind(subset(RawData,select=("BDNF_N."),RawData$Genotype,RawData$Treatment,RawData$Behavior)
lmdata <- cbind(subset(RawData,select=("BDNF_N"),RawData$Genotype,RawData$Treatment,RawData$Behavior)
)
runApp("ShinyApp")
as.data.frame(cbind(RawData$Genotype,RawData$Treatment,RawData$Behavior))
as.data.frame(cbind(as.character(RawData$Genotype),RawData$Treatment,RawData$Behavior))
runApp("ShinyApp")
runApp("ShinyApp")
install.packages("rpart")
runApp("ShinyApp")
category <- subset(RawData,select=(input$categoryselection))
category <- subset(RawData,select=(Genotype))
View(category)
paste("dtdata$",category)
paste("dtdata$",colname(category)
)
paste("dtdata$",colnames(category))
paste("dtdata$",category[1])
paste("dtdata$",colnames(category[1]))
gsub(" ","",paste("dtdata$",colnames(category[1])))
paste("dtdata$",genes)
paste("dtdata$",colnames(genes))
gsub(" ","",paste("dtdata$",colnames(genes)))
categoryname <- gsub(" ","",paste("dtdata$",colnames(category[1])))
genenames <- gsub(" ","",paste("dtdata$",colnames(genes)))
formula <- as.formula(paste(categoryname,"~",genenames,collapse="+"))
runApp("ShinyApp")
formula
formula <- as.formula(paste(categoryname,"~",paste(genenames,collapse="+"))
)
formula
formula <- as.formula(paste(categoryname,"~",paste(genenames,collapse="+")))
runApp("ShinyApp")
runApp("ShinyApp")
formula <- as.formula(paste(categoryname,"~",paste(genenames,collapse="+")))
categoryname <- "RawData$Genotype"
genenames <- gsub(" ","",paste("RawData$",colnames(genes)))
formula <- as.formula(paste(categoryname,"~",paste(genenames,collapse="+")))
library(rpart)
tree <- rpart(formula,data=RawData,method="class")
runApp("ShinyApp")
?rpart
runApp("ShinyApp")
summary(tree)
summary(tree)
runApp("ShinyApp")
?lm
formula
plot(formula)
runApp("ShinyApp")
fit <- lm(formula,data=RawData)
predict(lm,gene)
predict(fit,gene)
runApp("ShinyApp")
?formula
formula
formala[1]
formula[1]
formula$
1
as.character(formula)
fit
fit$coefficients
coef <- as.data.frame(fit$coefficients)
View(coef)
runApp("ShinyApp")
fit$coefficients
runApp("ShinyApp")
co <- fit$coefficients
co <- as.data.frame(fit$coefficients)
View(co)
runApp("ShinyApp")
runApp("ShinyApp")
View(co)
runApp("ShinyApp")
"Formula: " + formula
"Formula: " + as.character(formula)
"Formula: " + paste(formula)
"Formula: " + paste0(formula)
paste("Formula: " + paste0(formula))
paste("Formula: ", paste(formula))
paste0("Formula: ", paste(formula))
paste0("Formula: ", paste0(formula))
paste("Formula: ", paste0(formula))
formula[1]
formula[2]
formula[2,]
formula[2,999]
formula[2,len(formula)]
formula[2:]
formula[2:
formula[2:,
formula[2:,]
fdf <- as.data.frame(formaul)
fdf <- as.data.frame(formula)
formula
formula[3]
runApp("ShinyApp")
